# FFmpeg Integration in AutoVFX

## Overview

AutoVFX includes comprehensive FFmpeg integration to provide robust video export capabilities as a fallback when Premiere Pro's native export fails or is unavailable.

## Features

### Automatic FFmpeg Setup
- **Auto-download**: FFmpeg binaries are automatically downloaded on first use
- **Cross-platform**: Supports macOS (Intel/Apple Silicon) and Windows
- **Permission handling**: Automatically sets executable permissions and removes quarantine on macOS
- **Version detection**: Automatically detects the best FFmpeg version for your platform

### Export Capabilities
- **Segment Export**: Export specific In/Out point ranges
- **Format Support**: MP4, MOV, AVI, and other formats
- **Quality Control**: High, medium, low quality presets
- **Codec Options**: H.264, H.265, and other codecs
- **Audio Support**: AAC, MP3, and other audio codecs
- **Scaling**: Automatic resolution scaling options

### Progress Tracking
- **Real-time Progress**: Live progress updates during export
- **Time Estimation**: Accurate time remaining calculations
- **Error Handling**: Comprehensive error reporting and recovery

## How It Works

### Export Flow
1. **Primary Method**: Try Premiere Pro native export first
2. **Fallback Detection**: If Premiere Pro export fails, automatically switch to FFmpeg
3. **Media Discovery**: Analyze sequence to find source media files
4. **FFmpeg Processing**: Use FFmpeg to process and export video
5. **Progress Reporting**: Real-time progress updates to the UI

### FFmpeg Manager Architecture
```javascript
class FFmpegManager {
    // Platform detection and path management
    getFFmpegDir()
    getFFmpegPath()
    
    // Installation and setup
    ensureFFmpeg()
    downloadFFmpeg()
    extractFFmpeg()
    
    // Video processing
    exportVideoSegment()
    convertVideo()
    getVideoInfo()
    
    // Utility functions
    runFFmpegCommand()
    testFFmpeg()
}
```

## Configuration

### Basic Configuration
```json
{
  "ffmpeg": {
    "enabled": true,
    "autoDownload": true,
    "quality": "medium",
    "codec": "libx264",
    "audioCodec": "aac",
    "optimizeForWeb": true,
    "maxDuration": 300
  },
  "export": {
    "preferredMethod": "premiere",
    "fallbackToFFmpeg": true
  }
}
```

### Quality Settings
- **High**: CRF 18 (best quality, larger files)
- **Medium**: CRF 23 (balanced quality/size)
- **Low**: CRF 28 (smaller files, lower quality)

### Codec Options
- **Video**: libx264, libx265, libvpx-vp9
- **Audio**: aac, mp3, libvorbis
- **Container**: mp4, mov, avi, mkv

## File Locations

### macOS
- **FFmpeg Binary**: `~/Library/Application Support/AutoVFX/ffmpeg/ffmpeg`
- **Downloads**: `~/Library/Application Support/AutoVFX/ffmpeg/`

### Windows
- **FFmpeg Binary**: `%APPDATA%/AutoVFX/ffmpeg/ffmpeg.exe`
- **Downloads**: `%APPDATA%/AutoVFX/ffmpeg/`

## Usage Examples

### Basic Export
```javascript
const ffmpegManager = new FFmpegManager();

// Export segment
const result = await ffmpegManager.exportVideoSegment(
    '/path/to/input.mov',
    '/path/to/output.mp4',
    10.5,  // Start time (seconds)
    25.7,  // End time (seconds)
    {
        quality: 'medium',
        codec: 'libx264'
    }
);
```

### Advanced Export with Progress
```javascript
const progressCallback = (currentTime) => {
    const progress = (currentTime / totalDuration) * 100;
    console.log(`Export progress: ${progress}%`);
};

const result = await ffmpegManager.runFFmpegCommand(
    ['-i', inputPath, '-ss', '10', '-t', '15', outputPath],
    progressCallback
);
```

### Format Conversion
```javascript
await ffmpegManager.convertVideo(
    '/path/to/input.avi',
    '/path/to/output.mp4',
    {
        codec: 'libx264',
        audioCodec: 'aac',
        scale: '1920:1080',
        bitrate: '5000k'
    }
);
```

## Error Handling

### Common Issues and Solutions

**FFmpeg Download Fails**
- Check internet connection
- Verify download URLs are accessible
- Check disk space and permissions

**Export Fails**
- Verify source video file exists and is readable
- Check output directory permissions
- Ensure sufficient disk space

**Permission Denied (macOS)**
- FFmpeg automatically removes quarantine attributes
- Manual fix: `xattr -d com.apple.quarantine /path/to/ffmpeg`

**Codec Not Found**
- Use alternative codec (libx264 is most compatible)
- Check FFmpeg build includes required codecs

### Debug Mode
Enable detailed logging in configuration:
```json
{
  "debug": {
    "enableLogging": true,
    "logLevel": "debug"
  }
}
```

## Performance Considerations

### Optimization Tips
- Use hardware acceleration when available
- Choose appropriate quality settings for use case
- Consider source video format and codec
- Monitor system resources during export

### Resource Management
- FFmpeg processes are limited by available CPU cores
- Memory usage scales with video resolution and duration
- Temporary files are automatically cleaned up

## Integration with Runway API

The FFmpeg manager works seamlessly with the Runway API integration:

1. **Export**: Use FFmpeg to export timeline segment
2. **Upload**: Send exported video to Runway API
3. **Generate**: Process with AI video generation
4. **Import**: Bring generated video back to timeline

This provides a complete workflow even when Premiere Pro's native export is unavailable.

## Troubleshooting

### Logs and Debugging
- Check browser developer console for FFmpeg output
- Enable debug logging in configuration
- Monitor system logs for permission issues

### Manual FFmpeg Installation
If automatic download fails, you can manually install FFmpeg:

1. Download FFmpeg from [ffmpeg.org](https://ffmpeg.org/download.html)
2. Place binary in the expected location (see File Locations above)
3. Set executable permissions: `chmod +x /path/to/ffmpeg`

### Testing FFmpeg
```javascript
const ffmpegManager = new FFmpegManager();
const testResult = await ffmpegManager.testFFmpeg();
console.log('FFmpeg test:', testResult);
```

## Future Enhancements

Planned improvements include:
- Hardware acceleration support (NVENC, VideoToolbox, QSV)
- Additional codec support
- Batch processing capabilities
- Custom filter chains
- Real-time processing options 